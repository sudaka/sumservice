Задачи проекта:
1. Endpoint сервиса:
	1.1 Получает по HTTP имя CSV-файла в хранилище и суммирует каждый 10й столбец
	1.2 Показывает количество задач на вычисление, которые на текущий момент в работе
	1.3 Принимает ID задачи из п. 1.1 и отображает результат в JSON-формате
2 Сервис должен поддерживать обработку нескольких задач от одного клиента одновременно.
3 Сервис должен иметь возможность горизонтально масштабироваться 
4 загружать данные из AWS S3 и/или с локального диска
5 Количество строк в csv может достигать 3*10^6.
6 Подключение к хранилищу может работать нестабильно.

Для реализации сделано 3 сервиса: dnsserver.py (п. 3), REST интерфейс (п. 1, 2) api.py, модуль загрузки файлов (п. 2, 4) downloader.py и модуль расчета суммы (п. 5,6) summer.py.
Интерфейс:
/calculate?filename='' - добавление файла. 
	{
		"filename": "data.csv", 
		"id": "b87775cb83cbf0511096cfb67074662a", 
		"result": "Job in list"
	}
	
/getjobinfo?id=... - текущая информация, в случае отсутствия данных на текущем сервере и наличия доп. серверов сервис самостоятельно опрашивает соседей и отдает информацию
	{
	"b87775cb83cbf0511096cfb67074662a": {
		"fname": "data.csv", 
		"result": {
		"col19": 89.0784293527, 
		"col29": 80.9469995494, 
		"col39": 88.2101861221, 
		"col49": 86.595653627, 
		"col9": 81.1310216823
		}, 
		"server": "192.168.51.174", 
		"state": "10"
	}
	}
/getjobcount - текущее количество задач на всех серверах
/getjobcount?local=yes - текущее количество задач на данном сервере
{
  "result": 1
}

Схема работы: 
	сервер DNS (библиотека dnslib) балансирует нагрузку между хостами для реализации п. 3
	REST только принимает запросы, сохраняет их в файл jobs.json и формирует ответы
	downloader подготавливает файлы (скачивает в хранилище при необходимости)
	summer производит расчеты в 2 режимах - весь файл целиком или загрузка по частям и промежуточный расчет, псевдопараллельное выполнение задачи (зависит от настроек). 

	
	